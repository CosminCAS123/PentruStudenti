@page "/"
@rendermode InteractiveServer 
@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using PentruStudenti.Data
@using PentruStudenti.Shared.Enums
@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Devino un student mai bun!</PageTitle>

<MudContainer Class="d-flex justify-center align-center full-screen">
    <MudGrid Style="width: 66vw; height: 75vh;border: 2px solid green;" Spacing="0">
        <MudItem md="8" lg="8" Style="display: flex; justify-content: center; align-items: center;">
            <!-- here goes the image with the text.-->
            <MudText>IMAGE WILL BE HERE</MudText>

        </MudItem>

        <MudItem md="4" lg="4">
            <MudPaper Class="d-flex flex-column align-center justify-center p-6" Style="height: 100%;" >
                <MudText Typo="Typo.h4" Align="Align.Center">Register</MudText>

                <EditForm Model="@Input" OnValidSubmit="RegisterUser" Style="width: 100%;" >
                    <DataAnnotationsValidator />

                    <MudTextField @bind-Value="Input.FirstName" Label="First Name" Required="true" Class="mx-6" />
                    <MudTextField @bind-Value="Input.LastName" Label="Last Name" Required="true" Class="mx-6" />

                    <MudTextField @bind-Value="Input.University" Label="University" Required="true" Class="mx-6" />
                   
                    <MudSelect Variant="Variant.Filled" Label ="Nivel de studii" @bind-Value = "Input.StudyLevel"  Class="mx-6 mt-4 " >
                            
                        @foreach(StudyLevel level in Enum.GetValues(typeof(StudyLevel)))
                        {
                            <MudSelectItem Value="@level">@level</MudSelectItem>
                        }

                      
                    </MudSelect>

                   
                    <MudTextField @bind-Value="Input.Email" Label="Email" Required="true" Class="mx-6" />

                    <MudTextField @bind-Value="Input.Password" Label="Password" InputType="InputType.Password" Required="true" HelperText="Choose a strong password." Class="mx-6" />

                    <MudTextField @bind-Value="Input.ConfirmPassword" Label="Confirm Password" InputType="InputType.Password" Required="true" HelperText="Repeat the password." Class="mx-6" />

                    <MudButton Type="Submit" Variant="Variant.Filled" Color="Color.Primary" Class="mx-auto d-block mt-5">
                        Register
                    </MudButton>

                </EditForm>
                

            </MudPaper>
        </MudItem>

       

  </MudGrid>
</MudContainer>
<style>
    .full-screen{
    width: 100vw;
    height: 100vh;
    }
       
    
</style>

@code {
    private IEnumerable<IdentityError>? identityErrors;



    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    private void AddCustomUserData(ApplicationUser user)
    {
        
    }

    public async Task RegisterUser(EditContext editContext)
    {
        var user = CreateUser();

        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);
        var result = await UserManager.CreateAsync(user, Input.Password);

        if (!result.Succeeded)
        {
            identityErrors = result.Errors;
            return;
        }

        Logger.LogInformation("User created a new account with password.");

        //EMAIL CONFIRMATION STUFF

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

        await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

        if (UserManager.Options.SignIn.RequireConfirmedAccount)
        {
            RedirectManager.RedirectTo(
                "Account/RegisterConfirmation",
                new() { ["email"] = Input.Email, ["returnUrl"] = ReturnUrl });
        }

        await SignInManager.SignInAsync(user, isPersistent: false);
        RedirectManager.RedirectTo(ReturnUrl);
    }

    private ApplicationUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<ApplicationUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
                $"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private IUserEmailStore<ApplicationUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<ApplicationUser>)UserStore;
    }

    private sealed class InputModel
    {
        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Invalid email format")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password is required")]
        [StringLength(100, MinimumLength = 6, ErrorMessage = "Password must be between 6 and 100 characters")]
        public string Password { get; set; } = string.Empty;

        [Compare("Password", ErrorMessage = "Passwords do not match")]
        public string ConfirmPassword { get; set; } = string.Empty;

        [Required]
        public string FirstName { get; set; } = string.Empty;

        [Required]
        public string LastName { get; set; } = string.Empty;

        public string University { get; set; } = string.Empty;


        public StudyLevel StudyLevel { get; set; } = default;

    }

}
